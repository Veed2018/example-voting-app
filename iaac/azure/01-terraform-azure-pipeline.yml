# Azure Pipeline that run basic continuous integration on a Terraform project

# Will trigger the pipeline when code is pushed to all branches, including the iaac/azure path
trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - 'iaac/azure/*'

variables:
  serviceConnection: 'VotingApp_SC'
  # Terraform settings
  tf_wkdir: '$(System.DefaultWorkingDirectory)/iaac/azure'
  tf_version: '1.5.6'
  tf_mode: 'create' # create|destroy - folosit pt a distruge toate infra (development)

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: TerraformContinuousIntegration
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      steps:
      # Step 1: run the Checkov Static Code Analysis
      - bash: $(tf_wkdir)/checkov.sh $(tf_wkdir)
        displayName: Checkov Static Code Analysis
      # Step 2: install Terraform on the Azure Pipelines agent
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: $(tf_version)
      # Step 3: run Terraform init to initialize the workspace
      - task: TerraformCLI@0
        displayName: 'Run terraform init'
        inputs:
          command: init
          workingDirectory: $(tf_wkdir)
          backendType: 'azurerm'
          backendServiceArm: 'VotingApp_SC'
          backendAzureRmSubscriptionId: '58748300-daee-4162-a4a4-bc9d55d91416'
          allowTelemetryCollection: false
      # Step 4: run Terraform validate to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform validate'
        inputs:
          command: validate
          workingDirectory: $(tf_wkdir)
      # Step 5: run Terraform plan to validate HCL syntax
      - task: TerraformCLI@0
        displayName: 'Run terraform plan'
        inputs:
          command: plan
          workingDirectory: $(tf_wkdir)
          environmentServiceName: $(serviceConnection)
          commandOptions: "-out=$(tf_wkdir)/terraform.tfplan -var aks_client_id=$(aks_client_id) -var aks_client_secret=$(aks_client_secret) -detailed-exitcode"
          allowTelemetryCollection: false
          publishPlanResults: 'PlanResults'
      # Step 6: Copy Terraform state to artifact folder
      - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)
      - bash: echo Content of the Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)
      - task: CopyFiles@2
        displayName: 'Copy terraform.plan to Artifactory Dir'
        inputs:
          SourceFolder: $(tf_wkdir)
          Contents: '**'
          TargetFolder: $(Build.ArtifactStagingDirectory)
          OverWrite: true
      - bash: echo Content of the Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        displayName: 'Publish terrafom.plan as Artifact'
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)
          ArtifactName: terraform.tfplan
          publishLocation: Container
      # Step 7: Unlock Terraform tfstate file in case run fails
      - task: AzureCLI@2
        displayName: 'Unlock Terraform state file'
        inputs:
          azureSubscription: 'VotingApp_SC'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: 'az storage blob lease break --account-name "tfstate21752" --blob-name "dev.terraform.tstate" --container-name "tfstate" --account-key $(ARM_ACCESS_KEY)'
        condition: or(canceled(),failed())